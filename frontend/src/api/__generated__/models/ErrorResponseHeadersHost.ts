/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ErrorResponseHeadersHostAddress } from './ErrorResponseHeadersHostAddress';
import {
    ErrorResponseHeadersHostAddressFromJSON,
    ErrorResponseHeadersHostAddressFromJSONTyped,
    ErrorResponseHeadersHostAddressToJSON,
    ErrorResponseHeadersHostAddressToJSONTyped,
} from './ErrorResponseHeadersHostAddress';

/**
 * 
 * @export
 * @interface ErrorResponseHeadersHost
 */
export interface ErrorResponseHeadersHost {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseHeadersHost
     */
    hostString?: string;
    /**
     * 
     * @type {ErrorResponseHeadersHostAddress}
     * @memberof ErrorResponseHeadersHost
     */
    address?: ErrorResponseHeadersHostAddress;
    /**
     * 
     * @type {number}
     * @memberof ErrorResponseHeadersHost
     */
    port?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ErrorResponseHeadersHost
     */
    unresolved?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponseHeadersHost
     */
    hostName?: string;
}

/**
 * Check if a given object implements the ErrorResponseHeadersHost interface.
 */
export function instanceOfErrorResponseHeadersHost(value: object): value is ErrorResponseHeadersHost {
    return true;
}

export function ErrorResponseHeadersHostFromJSON(json: any): ErrorResponseHeadersHost {
    return ErrorResponseHeadersHostFromJSONTyped(json, false);
}

export function ErrorResponseHeadersHostFromJSONTyped(json: any, ignoreDiscriminator: boolean): ErrorResponseHeadersHost {
    if (json == null) {
        return json;
    }
    return {
        
        'hostString': json['hostString'] == null ? undefined : json['hostString'],
        'address': json['address'] == null ? undefined : ErrorResponseHeadersHostAddressFromJSON(json['address']),
        'port': json['port'] == null ? undefined : json['port'],
        'unresolved': json['unresolved'] == null ? undefined : json['unresolved'],
        'hostName': json['hostName'] == null ? undefined : json['hostName'],
    };
}

export function ErrorResponseHeadersHostToJSON(json: any): ErrorResponseHeadersHost {
    return ErrorResponseHeadersHostToJSONTyped(json, false);
}

export function ErrorResponseHeadersHostToJSONTyped(value?: ErrorResponseHeadersHost | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'hostString': value['hostString'],
        'address': ErrorResponseHeadersHostAddressToJSON(value['address']),
        'port': value['port'],
        'unresolved': value['unresolved'],
        'hostName': value['hostName'],
    };
}

