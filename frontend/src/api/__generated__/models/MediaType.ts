/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MediaType
 */
export interface MediaType {
    /**
     * 
     * @type {string}
     * @memberof MediaType
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaType
     */
    subtype?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof MediaType
     */
    parameters?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof MediaType
     */
    qualityValue?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MediaType
     */
    wildcardType?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof MediaType
     */
    wildcardSubtype?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MediaType
     */
    subtypeSuffix?: string;
    /**
     * 
     * @type {string}
     * @memberof MediaType
     */
    charset?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MediaType
     */
    concrete?: boolean;
}

/**
 * Check if a given object implements the MediaType interface.
 */
export function instanceOfMediaType(value: object): value is MediaType {
    return true;
}

export function MediaTypeFromJSON(json: any): MediaType {
    return MediaTypeFromJSONTyped(json, false);
}

export function MediaTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaType {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'subtype': json['subtype'] == null ? undefined : json['subtype'],
        'parameters': json['parameters'] == null ? undefined : json['parameters'],
        'qualityValue': json['qualityValue'] == null ? undefined : json['qualityValue'],
        'wildcardType': json['wildcardType'] == null ? undefined : json['wildcardType'],
        'wildcardSubtype': json['wildcardSubtype'] == null ? undefined : json['wildcardSubtype'],
        'subtypeSuffix': json['subtypeSuffix'] == null ? undefined : json['subtypeSuffix'],
        'charset': json['charset'] == null ? undefined : json['charset'],
        'concrete': json['concrete'] == null ? undefined : json['concrete'],
    };
}

export function MediaTypeToJSON(json: any): MediaType {
    return MediaTypeToJSONTyped(json, false);
}

export function MediaTypeToJSONTyped(value?: MediaType | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'subtype': value['subtype'],
        'parameters': value['parameters'],
        'qualityValue': value['qualityValue'],
        'wildcardType': value['wildcardType'],
        'wildcardSubtype': value['wildcardSubtype'],
        'subtypeSuffix': value['subtypeSuffix'],
        'charset': value['charset'],
        'concrete': value['concrete'],
    };
}

