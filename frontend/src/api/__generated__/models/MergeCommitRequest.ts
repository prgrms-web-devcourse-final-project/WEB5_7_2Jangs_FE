/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { BlockDto } from './BlockDto';
import {
    BlockDtoFromJSON,
    BlockDtoFromJSONTyped,
    BlockDtoToJSON,
    BlockDtoToJSONTyped,
} from './BlockDto';

/**
 * 
 * @export
 * @interface MergeCommitRequest
 */
export interface MergeCommitRequest {
    /**
     * 
     * @type {string}
     * @memberof MergeCommitRequest
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof MergeCommitRequest
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof MergeCommitRequest
     */
    baseBranchId?: number;
    /**
     * 
     * @type {number}
     * @memberof MergeCommitRequest
     */
    targetBranchId?: number;
    /**
     * 
     * @type {Array<BlockDto>}
     * @memberof MergeCommitRequest
     */
    content?: Array<BlockDto>;
}

/**
 * Check if a given object implements the MergeCommitRequest interface.
 */
export function instanceOfMergeCommitRequest(value: object): value is MergeCommitRequest {
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function MergeCommitRequestFromJSON(json: any): MergeCommitRequest {
    return MergeCommitRequestFromJSONTyped(json, false);
}

export function MergeCommitRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): MergeCommitRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'title': json['title'],
        'description': json['description'] == null ? undefined : json['description'],
        'baseBranchId': json['baseBranchId'] == null ? undefined : json['baseBranchId'],
        'targetBranchId': json['targetBranchId'] == null ? undefined : json['targetBranchId'],
        'content': json['content'] == null ? undefined : ((json['content'] as Array<any>).map(BlockDtoFromJSON)),
    };
}

export function MergeCommitRequestToJSON(json: any): MergeCommitRequest {
    return MergeCommitRequestToJSONTyped(json, false);
}

export function MergeCommitRequestToJSONTyped(value?: MergeCommitRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'title': value['title'],
        'description': value['description'],
        'baseBranchId': value['baseBranchId'],
        'targetBranchId': value['targetBranchId'],
        'content': value['content'] == null ? undefined : ((value['content'] as Array<any>).map(BlockDtoToJSON)),
    };
}

