/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ContentDisposition
 */
export interface ContentDisposition {
    /**
     * 
     * @type {string}
     * @memberof ContentDisposition
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentDisposition
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentDisposition
     */
    filename?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentDisposition
     */
    charset?: string;
    /**
     * 
     * @type {number}
     * @memberof ContentDisposition
     * @deprecated
     */
    size?: number;
    /**
     * 
     * @type {Date}
     * @memberof ContentDisposition
     * @deprecated
     */
    creationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContentDisposition
     * @deprecated
     */
    modificationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ContentDisposition
     * @deprecated
     */
    readDate?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof ContentDisposition
     */
    inline?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ContentDisposition
     */
    attachment?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ContentDisposition
     */
    formData?: boolean;
}

/**
 * Check if a given object implements the ContentDisposition interface.
 */
export function instanceOfContentDisposition(value: object): value is ContentDisposition {
    return true;
}

export function ContentDispositionFromJSON(json: any): ContentDisposition {
    return ContentDispositionFromJSONTyped(json, false);
}

export function ContentDispositionFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContentDisposition {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'name': json['name'] == null ? undefined : json['name'],
        'filename': json['filename'] == null ? undefined : json['filename'],
        'charset': json['charset'] == null ? undefined : json['charset'],
        'size': json['size'] == null ? undefined : json['size'],
        'creationDate': json['creationDate'] == null ? undefined : (new Date(json['creationDate'])),
        'modificationDate': json['modificationDate'] == null ? undefined : (new Date(json['modificationDate'])),
        'readDate': json['readDate'] == null ? undefined : (new Date(json['readDate'])),
        'inline': json['inline'] == null ? undefined : json['inline'],
        'attachment': json['attachment'] == null ? undefined : json['attachment'],
        'formData': json['formData'] == null ? undefined : json['formData'],
    };
}

export function ContentDispositionToJSON(json: any): ContentDisposition {
    return ContentDispositionToJSONTyped(json, false);
}

export function ContentDispositionToJSONTyped(value?: ContentDisposition | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'name': value['name'],
        'filename': value['filename'],
        'charset': value['charset'],
        'size': value['size'],
        'creationDate': value['creationDate'] == null ? undefined : ((value['creationDate']).toISOString()),
        'modificationDate': value['modificationDate'] == null ? undefined : ((value['modificationDate']).toISOString()),
        'readDate': value['readDate'] == null ? undefined : ((value['readDate']).toISOString()),
        'inline': value['inline'],
        'attachment': value['attachment'],
        'formData': value['formData'],
    };
}

