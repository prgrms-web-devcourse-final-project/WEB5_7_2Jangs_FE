/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PasswordResetRequest,
  UserLoginRequest,
  UserLoginResponse,
  UserSignupRequest,
  UserSignupResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PasswordResetRequestFromJSON,
    PasswordResetRequestToJSON,
    UserLoginRequestFromJSON,
    UserLoginRequestToJSON,
    UserLoginResponseFromJSON,
    UserLoginResponseToJSON,
    UserSignupRequestFromJSON,
    UserSignupRequestToJSON,
    UserSignupResponseFromJSON,
    UserSignupResponseToJSON,
} from '../models/index';

export interface LoginRequest {
    userLoginRequest: UserLoginRequest;
}

export interface ResetPasswordRequest {
    passwordResetRequest: PasswordResetRequest;
}

export interface SignupRequest {
    userSignupRequest: UserSignupRequest;
}

/**
 * 
 */
export class UserAPIApi extends runtime.BaseAPI {

    /**
     * 사용자가 이메일과 비밀번호를 입력하여 로그인을 시도합니다. 세션 방식으로 로그인하며, 성공 시 JSESSIONID 쿠키가 발급됩니다. 이미 로그인된 상태에서는 로그인할 수 없습니다. 
     * 로그인
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoginResponse>> {
        if (requestParameters['userLoginRequest'] == null) {
            throw new runtime.RequiredError(
                'userLoginRequest',
                'Required parameter "userLoginRequest" was null or undefined when calling login().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/user/login`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginRequestToJSON(requestParameters['userLoginRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLoginResponseFromJSON(jsonValue));
    }

    /**
     * 사용자가 이메일과 비밀번호를 입력하여 로그인을 시도합니다. 세션 방식으로 로그인하며, 성공 시 JSESSIONID 쿠키가 발급됩니다. 이미 로그인된 상태에서는 로그인할 수 없습니다. 
     * 로그인
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoginResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 현재 로그인된 세션을 무효화하여 로그아웃합니다. 클라이언트는 세션 쿠키(`JSESSIONID`)를 포함한 상태에서 요청해야 합니다. 세션이 없는 상태에서 요청하면 인증 오류가 발생합니다. 
     * 로그아웃
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/user/logout`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 현재 로그인된 세션을 무효화하여 로그아웃합니다. 클라이언트는 세션 쿠키(`JSESSIONID`)를 포함한 상태에서 요청해야 합니다. 세션이 없는 상태에서 요청하면 인증 오류가 발생합니다. 
     * 로그아웃
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutRaw(initOverrides);
    }

    /**
     * 인증이 완료된 사용자가 비밀번호를 변경합니다. `passCode`는 인증코드 검증 API(`/api/auth/code/check`)를 통해 발급된 값이어야 합니다. 비밀번호는 대소문자+숫자를 포함하여 8자 이상이어야 합니다. 
     * 비밀번호 변경
     */
    async resetPasswordRaw(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['passwordResetRequest'] == null) {
            throw new runtime.RequiredError(
                'passwordResetRequest',
                'Required parameter "passwordResetRequest" was null or undefined when calling resetPassword().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/user/password`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordResetRequestToJSON(requestParameters['passwordResetRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 인증이 완료된 사용자가 비밀번호를 변경합니다. `passCode`는 인증코드 검증 API(`/api/auth/code/check`)를 통해 발급된 값이어야 합니다. 비밀번호는 대소문자+숫자를 포함하여 8자 이상이어야 합니다. 
     * 비밀번호 변경
     */
    async resetPassword(requestParameters: ResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * 이메일 인증이 완료된 사용자가 회원 정보를 입력하여 회원가입을 완료합니다. `passCode`는 인증코드 검증 API(`/api/auth/code/check`)를 통해 발급된 값이어야 합니다. 로그인 상태에서는 접근할 수 없습니다. 
     * 회원가입
     */
    async signupRaw(requestParameters: SignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserSignupResponse>> {
        if (requestParameters['userSignupRequest'] == null) {
            throw new runtime.RequiredError(
                'userSignupRequest',
                'Required parameter "userSignupRequest" was null or undefined when calling signup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/user/signup`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserSignupRequestToJSON(requestParameters['userSignupRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserSignupResponseFromJSON(jsonValue));
    }

    /**
     * 이메일 인증이 완료된 사용자가 회원 정보를 입력하여 회원가입을 완료합니다. `passCode`는 인증코드 검증 API(`/api/auth/code/check`)를 통해 발급된 값이어야 합니다. 로그인 상태에서는 접근할 수 없습니다. 
     * 회원가입
     */
    async signup(requestParameters: SignupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserSignupResponse> {
        const response = await this.signupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
