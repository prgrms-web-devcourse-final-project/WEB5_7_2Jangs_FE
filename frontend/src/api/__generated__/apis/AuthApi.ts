/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CodeCheckRequest,
  CodeCheckResponse,
  ErrorResponse,
  PwdResetCodeRequest,
  SignupCodeRequest,
} from '../models/index';
import {
    CodeCheckRequestFromJSON,
    CodeCheckRequestToJSON,
    CodeCheckResponseFromJSON,
    CodeCheckResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PwdResetCodeRequestFromJSON,
    PwdResetCodeRequestToJSON,
    SignupCodeRequestFromJSON,
    SignupCodeRequestToJSON,
} from '../models/index';

export interface CheckCodeRequest {
    codeCheckRequest: CodeCheckRequest;
}

export interface SendResetPwdCodeRequest {
    pwdResetCodeRequest: PwdResetCodeRequest;
}

export interface SendSignupCodeRequest {
    signupCodeRequest: SignupCodeRequest;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * 입력한 이메일, 인증코드, 코드 타입을 통해 유효성을 검증합니다.
     * 인증코드 검증
     */
    async checkCodeRaw(requestParameters: CheckCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CodeCheckResponse>> {
        if (requestParameters['codeCheckRequest'] == null) {
            throw new runtime.RequiredError(
                'codeCheckRequest',
                'Required parameter "codeCheckRequest" was null or undefined when calling checkCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/code/check`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CodeCheckRequestToJSON(requestParameters['codeCheckRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CodeCheckResponseFromJSON(jsonValue));
    }

    /**
     * 입력한 이메일, 인증코드, 코드 타입을 통해 유효성을 검증합니다.
     * 인증코드 검증
     */
    async checkCode(requestParameters: CheckCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CodeCheckResponse> {
        const response = await this.checkCodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 입력한 이메일 주소로 비밀번호 변경용 인증코드를 전송합니다.
     * 비밀번호 변경 인증코드 전송
     */
    async sendResetPwdCodeRaw(requestParameters: SendResetPwdCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['pwdResetCodeRequest'] == null) {
            throw new runtime.RequiredError(
                'pwdResetCodeRequest',
                'Required parameter "pwdResetCodeRequest" was null or undefined when calling sendResetPwdCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/code/reset-password`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PwdResetCodeRequestToJSON(requestParameters['pwdResetCodeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 입력한 이메일 주소로 비밀번호 변경용 인증코드를 전송합니다.
     * 비밀번호 변경 인증코드 전송
     */
    async sendResetPwdCode(requestParameters: SendResetPwdCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendResetPwdCodeRaw(requestParameters, initOverrides);
    }

    /**
     * 입력한 이메일 주소로 회원가입용 인증코드를 전송합니다.
     * 회원가입 인증코드 전송
     */
    async sendSignupCodeRaw(requestParameters: SendSignupCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['signupCodeRequest'] == null) {
            throw new runtime.RequiredError(
                'signupCodeRequest',
                'Required parameter "signupCodeRequest" was null or undefined when calling sendSignupCode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/auth/code/signup-email`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignupCodeRequestToJSON(requestParameters['signupCodeRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 입력한 이메일 주소로 회원가입용 인증코드를 전송합니다.
     * 회원가입 인증코드 전송
     */
    async sendSignupCode(requestParameters: SendSignupCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendSignupCodeRaw(requestParameters, initOverrides);
    }

}
