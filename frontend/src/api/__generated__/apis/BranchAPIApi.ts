/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BranchCreateRequest,
  BranchCreateResponse,
  BranchRenameRequest,
  BranchRenameResponse,
  ErrorResponse,
} from '../models/index';
import {
    BranchCreateRequestFromJSON,
    BranchCreateRequestToJSON,
    BranchCreateResponseFromJSON,
    BranchCreateResponseToJSON,
    BranchRenameRequestFromJSON,
    BranchRenameRequestToJSON,
    BranchRenameResponseFromJSON,
    BranchRenameResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface CreateBranchOrSaveRequest {
    documentId: number;
    branchCreateRequest: BranchCreateRequest;
}

export interface DeleteBranchRequest {
    documentId: number;
    branchId: number;
}

export interface RenameBranchRequest {
    documentId: number;
    branchId: number;
    branchRenameRequest: BranchRenameRequest;
}

/**
 * 
 */
export class BranchAPIApi extends runtime.BaseAPI {

    /**
     * 새로운 저장을 만듭니다. 직전에 선택한 직전 커밋의 종류에 따라 다음을 실행합니다:  - 최신커밋에서 이어서 작업할 경우 그 브랜치에 새로운 저장 생성 - 아니라면 새로운 브랜치 생성 후 새로운 저장 생성 
     * 이어서 작업하기
     */
    async createBranchOrSaveRaw(requestParameters: CreateBranchOrSaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BranchCreateResponse>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling createBranchOrSave().'
            );
        }

        if (requestParameters['branchCreateRequest'] == null) {
            throw new runtime.RequiredError(
                'branchCreateRequest',
                'Required parameter "branchCreateRequest" was null or undefined when calling createBranchOrSave().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document/{documentId}/branch`;
        urlPath = urlPath.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BranchCreateRequestToJSON(requestParameters['branchCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BranchCreateResponseFromJSON(jsonValue));
    }

    /**
     * 새로운 저장을 만듭니다. 직전에 선택한 직전 커밋의 종류에 따라 다음을 실행합니다:  - 최신커밋에서 이어서 작업할 경우 그 브랜치에 새로운 저장 생성 - 아니라면 새로운 브랜치 생성 후 새로운 저장 생성 
     * 이어서 작업하기
     */
    async createBranchOrSave(requestParameters: CreateBranchOrSaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BranchCreateResponse> {
        const response = await this.createBranchOrSaveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 브랜치를 삭제합니다. 삭제 조건은 아래와 같습니다:  - 메인 브랜치(`fromCommit == null`)는 삭제 불가 - 다른 브랜치가 이 브랜치를 기반(fromCommit)으로 만들어졌다면 삭제 불가 - 블록, 시퀀스, 저장(MongoDB)도 함께 삭제됨 
     * 브랜치 삭제
     */
    async deleteBranchRaw(requestParameters: DeleteBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling deleteBranch().'
            );
        }

        if (requestParameters['branchId'] == null) {
            throw new runtime.RequiredError(
                'branchId',
                'Required parameter "branchId" was null or undefined when calling deleteBranch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{documentId}/branch/{branchId}`;
        urlPath = urlPath.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"branchId"}}`, encodeURIComponent(String(requestParameters['branchId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 브랜치를 삭제합니다. 삭제 조건은 아래와 같습니다:  - 메인 브랜치(`fromCommit == null`)는 삭제 불가 - 다른 브랜치가 이 브랜치를 기반(fromCommit)으로 만들어졌다면 삭제 불가 - 블록, 시퀀스, 저장(MongoDB)도 함께 삭제됨 
     * 브랜치 삭제
     */
    async deleteBranch(requestParameters: DeleteBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBranchRaw(requestParameters, initOverrides);
    }

    /**
     * 브랜치의 이름을 수정합니다. 메인브랜치의 이름은 수정할 수 없습니다.
     * 브랜치 이름 변경
     */
    async renameBranchRaw(requestParameters: RenameBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BranchRenameResponse>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling renameBranch().'
            );
        }

        if (requestParameters['branchId'] == null) {
            throw new runtime.RequiredError(
                'branchId',
                'Required parameter "branchId" was null or undefined when calling renameBranch().'
            );
        }

        if (requestParameters['branchRenameRequest'] == null) {
            throw new runtime.RequiredError(
                'branchRenameRequest',
                'Required parameter "branchRenameRequest" was null or undefined when calling renameBranch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document/{documentId}/branch/{branchId}`;
        urlPath = urlPath.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"branchId"}}`, encodeURIComponent(String(requestParameters['branchId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BranchRenameRequestToJSON(requestParameters['branchRenameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BranchRenameResponseFromJSON(jsonValue));
    }

    /**
     * 브랜치의 이름을 수정합니다. 메인브랜치의 이름은 수정할 수 없습니다.
     * 브랜치 이름 변경
     */
    async renameBranch(requestParameters: RenameBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BranchRenameResponse> {
        const response = await this.renameBranchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
