/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommitGraphResponse,
  DocCreateResponse,
  DocListResponse,
  DocListSimpleResponse,
  DocTitleRequest,
  DocTitleUpdateResponse,
} from '../models/index';
import {
    CommitGraphResponseFromJSON,
    CommitGraphResponseToJSON,
    DocCreateResponseFromJSON,
    DocCreateResponseToJSON,
    DocListResponseFromJSON,
    DocListResponseToJSON,
    DocListSimpleResponseFromJSON,
    DocListSimpleResponseToJSON,
    DocTitleRequestFromJSON,
    DocTitleRequestToJSON,
    DocTitleUpdateResponseFromJSON,
    DocTitleUpdateResponseToJSON,
} from '../models/index';

export interface CreateRequest {
    userId: number;
    docTitleRequest: DocTitleRequest;
}

export interface GetGraphRequest {
    userId: number;
    docId: number;
}

export interface ReadListRequest {
    userId: number;
}

export interface ReadListSidebarRequest {
    userId: number;
}

export interface UpdateDocumentTitleRequest {
    docId: number;
    userId: number;
    docTitleRequest: DocTitleRequest;
}

/**
 * 
 */
export class DocControllerApi extends runtime.BaseAPI {

    /**
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocCreateResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling create().'
            );
        }

        if (requestParameters['docTitleRequest'] == null) {
            throw new runtime.RequiredError(
                'docTitleRequest',
                'Required parameter "docTitleRequest" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocTitleRequestToJSON(requestParameters['docTitleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocCreateResponseFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocCreateResponse> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGraphRaw(requestParameters: GetGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommitGraphResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getGraph().'
            );
        }

        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling getGraph().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{docId}/graph`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommitGraphResponseFromJSON(jsonValue));
    }

    /**
     */
    async getGraph(requestParameters: GetGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommitGraphResponse> {
        const response = await this.getGraphRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readListRaw(requestParameters: ReadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DocListResponse>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling readList().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocListResponseFromJSON));
    }

    /**
     */
    async readList(requestParameters: ReadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DocListResponse>> {
        const response = await this.readListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readListSidebarRaw(requestParameters: ReadListSidebarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DocListSimpleResponse>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling readListSidebar().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/sidebar`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DocListSimpleResponseFromJSON));
    }

    /**
     */
    async readListSidebar(requestParameters: ReadListSidebarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DocListSimpleResponse>> {
        const response = await this.readListSidebarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateDocumentTitleRaw(requestParameters: UpdateDocumentTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocTitleUpdateResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling updateDocumentTitle().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateDocumentTitle().'
            );
        }

        if (requestParameters['docTitleRequest'] == null) {
            throw new runtime.RequiredError(
                'docTitleRequest',
                'Required parameter "docTitleRequest" was null or undefined when calling updateDocumentTitle().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userId'] != null) {
            queryParameters['userId'] = requestParameters['userId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document/{docId}`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DocTitleRequestToJSON(requestParameters['docTitleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocTitleUpdateResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateDocumentTitle(requestParameters: UpdateDocumentTitleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocTitleUpdateResponse> {
        const response = await this.updateDocumentTitleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
