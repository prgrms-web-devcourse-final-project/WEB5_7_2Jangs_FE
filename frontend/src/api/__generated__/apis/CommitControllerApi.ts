/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommitResponse,
  CompareMergeCommitResponse,
  CreateCommitRequest,
  CreateCommitResponse,
  MergeCommitRequest,
} from '../models/index';
import {
    CommitResponseFromJSON,
    CommitResponseToJSON,
    CompareMergeCommitResponseFromJSON,
    CompareMergeCommitResponseToJSON,
    CreateCommitRequestFromJSON,
    CreateCommitRequestToJSON,
    CreateCommitResponseFromJSON,
    CreateCommitResponseToJSON,
    MergeCommitRequestFromJSON,
    MergeCommitRequestToJSON,
} from '../models/index';

export interface CompareMergeCommitRequest {
    docId: number;
    base: number;
    target: number;
}

export interface CreateCommitOperationRequest {
    docId: number;
    createCommitRequest: CreateCommitRequest;
}

export interface GetCommitRequest {
    docId: number;
    commitId: number;
}

export interface MergeCommitOperationRequest {
    docId: number;
    mergeCommitRequest: MergeCommitRequest;
}

/**
 * 
 */
export class CommitControllerApi extends runtime.BaseAPI {

    /**
     */
    async compareMergeCommitRaw(requestParameters: CompareMergeCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompareMergeCommitResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling compareMergeCommit().'
            );
        }

        if (requestParameters['base'] == null) {
            throw new runtime.RequiredError(
                'base',
                'Required parameter "base" was null or undefined when calling compareMergeCommit().'
            );
        }

        if (requestParameters['target'] == null) {
            throw new runtime.RequiredError(
                'target',
                'Required parameter "target" was null or undefined when calling compareMergeCommit().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['base'] != null) {
            queryParameters['base'] = requestParameters['base'];
        }

        if (requestParameters['target'] != null) {
            queryParameters['target'] = requestParameters['target'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{docId}/merge`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompareMergeCommitResponseFromJSON(jsonValue));
    }

    /**
     */
    async compareMergeCommit(requestParameters: CompareMergeCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompareMergeCommitResponse> {
        const response = await this.compareMergeCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createCommitRaw(requestParameters: CreateCommitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommitResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling createCommit().'
            );
        }

        if (requestParameters['createCommitRequest'] == null) {
            throw new runtime.RequiredError(
                'createCommitRequest',
                'Required parameter "createCommitRequest" was null or undefined when calling createCommit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document/{docId}/commit`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommitRequestToJSON(requestParameters['createCommitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommitResponseFromJSON(jsonValue));
    }

    /**
     */
    async createCommit(requestParameters: CreateCommitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommitResponse> {
        const response = await this.createCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCommitRaw(requestParameters: GetCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommitResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling getCommit().'
            );
        }

        if (requestParameters['commitId'] == null) {
            throw new runtime.RequiredError(
                'commitId',
                'Required parameter "commitId" was null or undefined when calling getCommit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{docId}/commit/{commitId}`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters['commitId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommitResponseFromJSON(jsonValue));
    }

    /**
     */
    async getCommit(requestParameters: GetCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommitResponse> {
        const response = await this.getCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async mergeCommitRaw(requestParameters: MergeCommitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommitResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling mergeCommit().'
            );
        }

        if (requestParameters['mergeCommitRequest'] == null) {
            throw new runtime.RequiredError(
                'mergeCommitRequest',
                'Required parameter "mergeCommitRequest" was null or undefined when calling mergeCommit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document/{docId}/merge`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MergeCommitRequestToJSON(requestParameters['mergeCommitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommitResponseFromJSON(jsonValue));
    }

    /**
     */
    async mergeCommit(requestParameters: MergeCommitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommitResponse> {
        const response = await this.mergeCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
