/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommitResponse,
  CompareMergeCommitResponse,
  CreateCommitRequest,
  CreateCommitResponse,
  ErrorResponse,
  MergeCommitRequest,
} from '../models/index';
import {
    CommitResponseFromJSON,
    CommitResponseToJSON,
    CompareMergeCommitResponseFromJSON,
    CompareMergeCommitResponseToJSON,
    CreateCommitRequestFromJSON,
    CreateCommitRequestToJSON,
    CreateCommitResponseFromJSON,
    CreateCommitResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    MergeCommitRequestFromJSON,
    MergeCommitRequestToJSON,
} from '../models/index';

export interface CompareMergeCommitRequest {
    docId: number;
    base: number;
    target: number;
}

export interface CreateCommitOperationRequest {
    docId: number;
    createCommitRequest: CreateCommitRequest;
}

export interface DeleteCommitRequest {
    docId: number;
    commitId: number;
}

export interface GetCommitRequest {
    commitId: number;
    docId: number;
}

export interface MergeCommitOperationRequest {
    docId: number;
    mergeCommitRequest: MergeCommitRequest;
}

/**
 * 
 */
export class CommitAPIApi extends runtime.BaseAPI {

    /**
     * 유저가 소유한 문서에서 머지할 2개의 커밋 내용을 조회합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 머지할 2개의 커밋 내용을 조회합니다.
     */
    async compareMergeCommitRaw(requestParameters: CompareMergeCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CompareMergeCommitResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling compareMergeCommit().'
            );
        }

        if (requestParameters['base'] == null) {
            throw new runtime.RequiredError(
                'base',
                'Required parameter "base" was null or undefined when calling compareMergeCommit().'
            );
        }

        if (requestParameters['target'] == null) {
            throw new runtime.RequiredError(
                'target',
                'Required parameter "target" was null or undefined when calling compareMergeCommit().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['base'] != null) {
            queryParameters['base'] = requestParameters['base'];
        }

        if (requestParameters['target'] != null) {
            queryParameters['target'] = requestParameters['target'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{docId}/merge`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompareMergeCommitResponseFromJSON(jsonValue));
    }

    /**
     * 유저가 소유한 문서에서 머지할 2개의 커밋 내용을 조회합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 머지할 2개의 커밋 내용을 조회합니다.
     */
    async compareMergeCommit(requestParameters: CompareMergeCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CompareMergeCommitResponse> {
        const response = await this.compareMergeCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 유저가 소유한 문서에서 새로운 기록(commit)을 만듭니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 새로운 기록(commit)을 만듭니다.
     */
    async createCommitRaw(requestParameters: CreateCommitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommitResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling createCommit().'
            );
        }

        if (requestParameters['createCommitRequest'] == null) {
            throw new runtime.RequiredError(
                'createCommitRequest',
                'Required parameter "createCommitRequest" was null or undefined when calling createCommit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document/{docId}/commit`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCommitRequestToJSON(requestParameters['createCommitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommitResponseFromJSON(jsonValue));
    }

    /**
     * 유저가 소유한 문서에서 새로운 기록(commit)을 만듭니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 새로운 기록(commit)을 만듭니다.
     */
    async createCommit(requestParameters: CreateCommitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommitResponse> {
        const response = await this.createCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 기록을 삭제합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다.  삭제 조건은 아래와 같습니다:  - 각 브랜치의 LeafCommit만 삭제 가능 - 어느 브랜치의 FromCommit이면 삭제 불가 - 브랜치의 RootCommit은 삭제 불가(RootCommit까지 삭제하고 싶은 경우 브랜치 삭제를 권장합니다) 
     * 기록 삭제
     */
    async deleteCommitRaw(requestParameters: DeleteCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling deleteCommit().'
            );
        }

        if (requestParameters['commitId'] == null) {
            throw new runtime.RequiredError(
                'commitId',
                'Required parameter "commitId" was null or undefined when calling deleteCommit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{docId}/commit/{commitId}`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));
        urlPath = urlPath.replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters['commitId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 기록을 삭제합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다.  삭제 조건은 아래와 같습니다:  - 각 브랜치의 LeafCommit만 삭제 가능 - 어느 브랜치의 FromCommit이면 삭제 불가 - 브랜치의 RootCommit은 삭제 불가(RootCommit까지 삭제하고 싶은 경우 브랜치 삭제를 권장합니다) 
     * 기록 삭제
     */
    async deleteCommit(requestParameters: DeleteCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCommitRaw(requestParameters, initOverrides);
    }

    /**
     * 유저가 소유한 문서에서 만든 기록을 조회합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 기존에 만든 기록(commit)을 조회합니다
     */
    async getCommitRaw(requestParameters: GetCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommitResponse>> {
        if (requestParameters['commitId'] == null) {
            throw new runtime.RequiredError(
                'commitId',
                'Required parameter "commitId" was null or undefined when calling getCommit().'
            );
        }

        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling getCommit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{docId}/commit/{commitId}`;
        urlPath = urlPath.replace(`{${"commitId"}}`, encodeURIComponent(String(requestParameters['commitId'])));
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommitResponseFromJSON(jsonValue));
    }

    /**
     * 유저가 소유한 문서에서 만든 기록을 조회합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 기존에 만든 기록(commit)을 조회합니다
     */
    async getCommit(requestParameters: GetCommitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommitResponse> {
        const response = await this.getCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 유저가 소유한 문서에서 branch 2개를 merge 합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * request 에 담긴 2개의 branch id 를 기반으로 merge 합니다.
     */
    async mergeCommitRaw(requestParameters: MergeCommitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCommitResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling mergeCommit().'
            );
        }

        if (requestParameters['mergeCommitRequest'] == null) {
            throw new runtime.RequiredError(
                'mergeCommitRequest',
                'Required parameter "mergeCommitRequest" was null or undefined when calling mergeCommit().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document/{docId}/merge`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MergeCommitRequestToJSON(requestParameters['mergeCommitRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCommitResponseFromJSON(jsonValue));
    }

    /**
     * 유저가 소유한 문서에서 branch 2개를 merge 합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * request 에 담긴 2개의 branch id 를 기반으로 merge 합니다.
     */
    async mergeCommit(requestParameters: MergeCommitOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCommitResponse> {
        const response = await this.mergeCommitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
