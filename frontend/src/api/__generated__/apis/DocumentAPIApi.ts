/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CommitGraphResponse,
  DocCreateResponse,
  DocTitleRequest,
  ErrorResponse,
} from '../models/index';
import {
    CommitGraphResponseFromJSON,
    CommitGraphResponseToJSON,
    DocCreateResponseFromJSON,
    DocCreateResponseToJSON,
    DocTitleRequestFromJSON,
    DocTitleRequestToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models/index';

export interface DeleteRequest {
    docId: number;
}

export interface CreateRequest {
    docTitleRequest: DocTitleRequest;
}

export interface GetGraphRequest {
    docId: number;
}

export interface ReadListRequest {
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

export interface ReadListSidebarRequest {
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

export interface RenameRequest {
    docId: number;
    docTitleRequest: DocTitleRequest;
}

export interface SearchRequest {
    keyword: string;
    sort?: string;
    order?: string;
    page?: number;
    size?: number;
}

/**
 * 
 */
export class DocumentAPIApi extends runtime.BaseAPI {

    /**
     * 사용자 소유의 문서를 삭제합니다. 관련된 모든 브랜치, 커밋, 저장 데이터들도 함께 정리됩니다. 
     * 문서 삭제
     */
    async _deleteRaw(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling _delete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{docId}`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 사용자 소유의 문서를 삭제합니다. 관련된 모든 브랜치, 커밋, 저장 데이터들도 함께 정리됩니다. 
     * 문서 삭제
     */
    async _delete(requestParameters: DeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._deleteRaw(requestParameters, initOverrides);
    }

    /**
     * 문서를 생성하면 기본 브랜치와 저장을 생성하고, 생성된 문서와 저장의 ID를 반환
     * 문서 생성
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocCreateResponse>> {
        if (requestParameters['docTitleRequest'] == null) {
            throw new runtime.RequiredError(
                'docTitleRequest',
                'Required parameter "docTitleRequest" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocTitleRequestToJSON(requestParameters['docTitleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocCreateResponseFromJSON(jsonValue));
    }

    /**
     * 문서를 생성하면 기본 브랜치와 저장을 생성하고, 생성된 문서와 저장의 ID를 반환
     * 문서 생성
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocCreateResponse> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 문서 ID를 기반으로 커밋 간선 정보와 브랜치 정보를 포함한 그래프 데이터를 조회합니다.
     * 문서 하나의 기록 그래프 조회
     */
    async getGraphRaw(requestParameters: GetGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CommitGraphResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling getGraph().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{docId}/graph`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CommitGraphResponseFromJSON(jsonValue));
    }

    /**
     * 문서 ID를 기반으로 커밋 간선 정보와 브랜치 정보를 포함한 그래프 데이터를 조회합니다.
     * 문서 하나의 기록 그래프 조회
     */
    async getGraph(requestParameters: GetGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CommitGraphResponse> {
        const response = await this.getGraphRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 로그인한 사용자의 문서 목록을 페이지네이션과 정렬 옵션에 따라 조회합니다. 정렬 필드는 기본적으로 updatedAt이며, order는 desc가 기본값입니다. 
     * 전체 문서 목록 조회
     */
    async readListRaw(requestParameters: ReadListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 로그인한 사용자의 문서 목록을 페이지네이션과 정렬 옵션에 따라 조회합니다. 정렬 필드는 기본적으로 updatedAt이며, order는 desc가 기본값입니다. 
     * 전체 문서 목록 조회
     */
    async readList(requestParameters: ReadListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.readListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 사이드바에 표시할 요약된 문서 목록을 조회합니다. 기본 정렬은 updatedAt, 기본 정렬 순서는 desc입니다. 
     * 사이드바용 문서 목록 조회
     */
    async readListSidebarRaw(requestParameters: ReadListSidebarRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/sidebar`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 사이드바에 표시할 요약된 문서 목록을 조회합니다. 기본 정렬은 updatedAt, 기본 정렬 순서는 desc입니다. 
     * 사이드바용 문서 목록 조회
     */
    async readListSidebar(requestParameters: ReadListSidebarRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.readListSidebarRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 문서의 제목을 수정합니다.
     * 문서 제목 수정
     */
    async renameRaw(requestParameters: RenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocCreateResponse>> {
        if (requestParameters['docId'] == null) {
            throw new runtime.RequiredError(
                'docId',
                'Required parameter "docId" was null or undefined when calling rename().'
            );
        }

        if (requestParameters['docTitleRequest'] == null) {
            throw new runtime.RequiredError(
                'docTitleRequest',
                'Required parameter "docTitleRequest" was null or undefined when calling rename().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document/{docId}`;
        urlPath = urlPath.replace(`{${"docId"}}`, encodeURIComponent(String(requestParameters['docId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: DocTitleRequestToJSON(requestParameters['docTitleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocCreateResponseFromJSON(jsonValue));
    }

    /**
     * 문서의 제목을 수정합니다.
     * 문서 제목 수정
     */
    async rename(requestParameters: RenameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocCreateResponse> {
        const response = await this.renameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 로그인한 사용자의 문서 중 제목에 해당 키워드가 포함된 문서를 검색합니다. 검색 결과는 페이지네이션 및 정렬 조건(`sort`, `order`)에 따라 반환됩니다. 기본 정렬 필드는 `updatedAt`, 정렬 순서는 `desc`입니다. 
     * 문서 제목 검색
     */
    async searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['keyword'] == null) {
            throw new runtime.RequiredError(
                'keyword',
                'Required parameter "keyword" was null or undefined when calling search().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['keyword'] != null) {
            queryParameters['keyword'] = requestParameters['keyword'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['order'] != null) {
            queryParameters['order'] = requestParameters['order'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/search`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * 로그인한 사용자의 문서 중 제목에 해당 키워드가 포함된 문서를 검색합니다. 검색 결과는 페이지네이션 및 정렬 조건(`sort`, `order`)에 따라 반환됩니다. 기본 정렬 필드는 `updatedAt`, 정렬 순서는 `desc`입니다. 
     * 문서 제목 검색
     */
    async search(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
