/* tslint:disable */
/* eslint-disable */
/**
 * Docsa API
 * Docsa의 백엔드 API 명세입니다.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  SaveGetResponse,
  SaveUpdateRequest,
  SaveUpdateResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    SaveGetResponseFromJSON,
    SaveGetResponseToJSON,
    SaveUpdateRequestFromJSON,
    SaveUpdateRequestToJSON,
    SaveUpdateResponseFromJSON,
    SaveUpdateResponseToJSON,
} from '../models/index';

export interface DeleteSaveRequest {
    documentId: number;
    saveId: number;
}

export interface GetSaveRequest {
    documentId: number;
    saveId: number;
}

export interface UpdateSaveRequest {
    documentId: number;
    saveId: number;
    saveUpdateRequest: SaveUpdateRequest;
}

/**
 * 
 */
export class SaveAPIApi extends runtime.BaseAPI {

    /**
     * 유저가 소유한 문서의 저장을 삭제합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 요청한 저장 id에 해당하는 저장 삭제
     */
    async deleteSaveRaw(requestParameters: DeleteSaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling deleteSave().'
            );
        }

        if (requestParameters['saveId'] == null) {
            throw new runtime.RequiredError(
                'saveId',
                'Required parameter "saveId" was null or undefined when calling deleteSave().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{documentId}/save/{saveId}`;
        urlPath = urlPath.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"saveId"}}`, encodeURIComponent(String(requestParameters['saveId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 유저가 소유한 문서의 저장을 삭제합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 요청한 저장 id에 해당하는 저장 삭제
     */
    async deleteSave(requestParameters: DeleteSaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSaveRaw(requestParameters, initOverrides);
    }

    /**
     * 유저가 소유한 문서의 저장을 조회합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 요청한 저장 id에 해당하는 저장 조회
     */
    async getSaveRaw(requestParameters: GetSaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaveGetResponse>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling getSave().'
            );
        }

        if (requestParameters['saveId'] == null) {
            throw new runtime.RequiredError(
                'saveId',
                'Required parameter "saveId" was null or undefined when calling getSave().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/document/{documentId}/save/{saveId}`;
        urlPath = urlPath.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"saveId"}}`, encodeURIComponent(String(requestParameters['saveId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaveGetResponseFromJSON(jsonValue));
    }

    /**
     * 유저가 소유한 문서의 저장을 조회합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 요청한 저장 id에 해당하는 저장 조회
     */
    async getSave(requestParameters: GetSaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaveGetResponse> {
        const response = await this.getSaveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 유저가 소유한 문서의 저장을 수정합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 요청한 저장 id에 해당하는 저장 수정
     */
    async updateSaveRaw(requestParameters: UpdateSaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SaveUpdateResponse>> {
        if (requestParameters['documentId'] == null) {
            throw new runtime.RequiredError(
                'documentId',
                'Required parameter "documentId" was null or undefined when calling updateSave().'
            );
        }

        if (requestParameters['saveId'] == null) {
            throw new runtime.RequiredError(
                'saveId',
                'Required parameter "saveId" was null or undefined when calling updateSave().'
            );
        }

        if (requestParameters['saveUpdateRequest'] == null) {
            throw new runtime.RequiredError(
                'saveUpdateRequest',
                'Required parameter "saveUpdateRequest" was null or undefined when calling updateSave().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/document/{documentId}/save/{saveId}`;
        urlPath = urlPath.replace(`{${"documentId"}}`, encodeURIComponent(String(requestParameters['documentId'])));
        urlPath = urlPath.replace(`{${"saveId"}}`, encodeURIComponent(String(requestParameters['saveId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SaveUpdateRequestToJSON(requestParameters['saveUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SaveUpdateResponseFromJSON(jsonValue));
    }

    /**
     * 유저가 소유한 문서의 저장을 수정합니다. 🔐 이 API는 세션 로그인 상태에서 호출되어야 하며, 클라이언트는 쿠키(`JSESSIONID`)를 통해 인증 정보를 전송해야 합니다. 
     * 유저가 요청한 저장 id에 해당하는 저장 수정
     */
    async updateSave(requestParameters: UpdateSaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SaveUpdateResponse> {
        const response = await this.updateSaveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
